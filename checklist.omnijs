/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.checklist",
    "version": "2.0",
    "description": "Handle checklist issues with OmniFocus.",
    "label": "Create a checklist",
    "shortLabel": "Create a checklist",
    "paletteLabel": "Create a checklist",
    "image": "checklist"
}*/
(() => {
    const preferences = new Preferences();

    const devPlugin = PlugIn.find('org.0x3f.libdev');

    if (devPlugin === null) {
        throw new Error('Dev library plugin not installed.');
    }

    const libdev = devPlugin.library('libdev');

    // Preference keys
    const PREF_CHECKLIST_TEMPLATE_FOLDER = 'checklist_templates_folder';
    const PREF_MRU_TEMPLATE              = 'mru_template';

    // Runtime dialog fields
    const FIELD_TEMPLATE = 'template';

    function prompt_preferences_dialog() {
        const folderIds   = flattenedFolders.map(folder => folder.id.primaryKey);
        const folderNames = flattenedFolders.map((folder) => {
            let label = folder.name;

            while (folder.parent !== null) {
                label = folder.parent.name + ' > ' + label;
                folder = folder.parent;
            }

            return label;
        });

        const templateFolderID = libdev.getString(preferences, PREF_CHECKLIST_TEMPLATE_FOLDER);

        const templateFolderOption = new Form.Field.Option(
            PREF_CHECKLIST_TEMPLATE_FOLDER,
            'Templates folder',
            folderIds,
            folderNames,
            templateFolderID
        )

        const preferenceForm = new Form();

        preferenceForm.addField(templateFolderOption);

        preferenceForm.validate = function (formObject) { return true; };

        const formPromise = preferenceForm.show('Checklist', 'Save');

        formPromise.then((formObject) => {
            libdev.setString(preferences, PREF_CHECKLIST_TEMPLATE_FOLDER, formObject);
        });
    }

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            if (libdev.isPreferenceAction(sender)) {
                prompt_preferences_dialog();
            } else {
                const templateFolderID = libdev.getString(preferences, PREF_CHECKLIST_TEMPLATE_FOLDER);

                if (templateFolderID === null) {
                    throw { name: 'Emmm...', message: 'Checklist template folder must be set in the preferences. (Click the action with CTRL key)' };
                }

                const templateFolder = Folder.byIdentifier(templateFolderID);

                if (templateFolder.projects.length === 0) {
                    throw { name: 'Emmm...', message: 'No checklist templates found!' };
                }

                const projectIds   = templateFolder.projects.map(project => project.id.primaryKey);
                const projectNames = templateFolder.projects.map(project => project.name);
                const templateMenu = new Form.Field.Option(FIELD_TEMPLATE, null, projectIds, projectNames, preferences.readString(PREF_MRU_TEMPLATE));

                const form = new Form();

                form.addField(templateMenu);

                form.validate = function (formObject) { return true; };

                const formPromise = form.show('Choose a template', 'Create');

                formPromise.then((formObject) => {
                    const templateID = formObject.values[FIELD_TEMPLATE];

                    const template = Project.byIdentifier(templateID);

                    if (template === null) {
                        throw { name: 'Invalid Template', message: 'Invalid template selected.', };
                    }

                    // Create the checklist under all chosen projects
                    selection.projects.forEach((targetProject) => {
                        var rootTask = new Task(template.name, targetProject);

                        rootTask.completedByChildren = template.completedByChildren;
                        rootTask.note                = template.note;
                        rootTask.sequential          = template.sequential;

                        duplicateTasks(template.tasks, rootTask);

                        rootTask.addTags(template.tags);
                    });

                    preferences.write(PREF_MRU_TEMPLATE, templateID);
                });
            }
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        return libdev.isPreferenceAction(sender) || selection.projects.length > 0;
    };

    return action;
})();
